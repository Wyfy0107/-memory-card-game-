{"version":3,"sources":["StatusDisp.js","Display.js","Card.js","Hoc.js","App.js","serviceWorker.js","index.js"],"names":["StatusDisp","props","children","Display","className","text","onClick","shuffle","disabled","start","Card","turnCards","index","content","Aux","App","state","cards","userClickedPattern","displayText","eventTarget","shuffleCards","cardDeck","i","length","randomIndex","Math","floor","random","temp","setState","event","clickedCard","target","objectPattern","push","pattern","cardIndex","getAttribute","cardNum","style","transform","fontSize","console","log","setTimeout","splice","cardsList","this","map","num","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAEe,SAASA,EAAWC,GAE/B,OACI,6BACI,4BAAKA,EAAMC,WCORC,MATf,SAAiBF,GACb,OACI,yBAAKG,UAAU,WACX,kBAACJ,EAAD,KAAcC,EAAMI,MACpB,4BAAQC,QAASL,EAAMM,QAASC,SAAUP,EAAMQ,OAAhD,W,MCGGC,MARf,SAAcT,GACV,OACI,yBAAKG,UAAU,QAAQE,QAASL,EAAMU,UAAWC,MAAOX,EAAMW,OACzDX,EAAMY,UCCJC,G,MAJH,SAACb,GACZ,OAAO,yBAAKG,UAAU,mBAAmBH,EAAMC,YCE3Ba,G,kNACpBC,MAAQ,CAEPC,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,IAC3DR,OAAO,EACPS,mBAAoB,GACpBC,YAAa,mBACbC,YAAa,I,EAGdC,aAAe,WAEd,IADA,IAAIC,EAAQ,YAAO,EAAKN,MAAMC,OACrBM,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAC9CM,EAAOP,EAASC,GACpBD,EAASC,GAAKD,EAASG,GACvBH,EAASG,GAAeI,EAEzB,EAAKC,SAAS,CACbb,MAAOK,EACPb,OAAO,EACPU,YAAa,wD,EAIfR,UAAY,SAACoB,GACZ,IAAIC,EAAcD,EAAME,OACpBC,EAAgB,EAAKlB,MAAMI,YAC/Bc,EAAcC,KAAKH,GACnB,IAAII,EAAU,EAAKpB,MAAME,mBACrBmB,EAAYL,EAAYM,aAAa,SACrCC,EAAU,EAAKvB,MAAMC,MAAMoB,GAC/BD,EAAQD,KAAKI,GACbP,EAAYQ,MAAMC,UAAY,aAC9BT,EAAYQ,MAAME,SAAW,OACN,IAAnBN,EAAQZ,OACPY,EAAQA,EAAQZ,OAAS,KAAOY,EAAQA,EAAQZ,OAAS,KAC5DmB,QAAQC,IAAIR,EAAQA,EAAQZ,OAAS,IACrCmB,QAAQC,IAAIR,EAAQA,EAAQZ,OAAS,IACrCqB,YAAW,WACVX,EAAcA,EAAcV,OAAS,GAAGgB,MAAME,SAAW,IACzDR,EAAcA,EAAcV,OAAS,GAAGgB,MAAMC,UAC7C,kBACDP,EAAcA,EAAcV,OAAS,GAAGgB,MAAME,SAAW,IACzDR,EAAcA,EAAcV,OAAS,GAAGgB,MAAMC,UAC7C,oBACC,OAEML,EAAQZ,OAAS,GAC3BY,EAAQU,OAAO,EAAG,GAEnBH,QAAQC,IAAIR,EAAQZ,S,uDAGX,IAAD,OACFuB,EAAYC,KAAKhC,MAAMC,MAAMgC,KAAI,SAACC,EAAKtC,GAC5C,OACC,kBAAC,EAAD,CACCuC,IAAKvC,EACLC,QAASqC,EACTvC,UAAW,EAAKA,UAChBC,MAAOA,OAIV,OACC,yBAAKR,UAAU,OACd,kBAAC,EAAD,CACCC,KAAM2C,KAAKhC,MAAMG,YACjBZ,QAASyC,KAAK3B,aACdZ,MAAOuC,KAAKhC,MAAMP,QAEnB,kBAAC,EAAD,KAAMsC,Q,GAxEuBK,cCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.0d4a5bba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function StatusDisp(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <h1>{props.children}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Display.css'\r\nimport StatusDisp from './StatusDisp'\r\n\r\nfunction Display(props) {\r\n    return (\r\n        <div className='display'>\r\n            <StatusDisp >{props.text}</StatusDisp>\r\n            <button onClick={props.shuffle} disabled={props.start}>Start</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import React from 'react'\r\nimport './Cards.css'\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className='cards' onClick={props.turnCards} index={props.index}>\r\n            {props.content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\nimport './Hoc.css';\r\n\r\nconst Aux = (props) => {\r\n\treturn <div className='cards-container'>{props.children}</div>;\r\n};\r\n\r\nexport default Aux;\r\n","import React, { Component } from 'react';\r\nimport Display from './Display';\r\nimport Card from './Card';\r\nimport Hoc from './Hoc';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n\tstate = {\r\n\t\t//prettier-ignore\r\n\t\tcards: [1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12,],\r\n\t\tstart: false,\r\n\t\tuserClickedPattern: [],\r\n\t\tdisplayText: 'Memory Card Game',\r\n\t\teventTarget: [],\r\n\t};\r\n\r\n\tshuffleCards = () => {\r\n\t\tlet cardDeck = [...this.state.cards];\r\n\t\tfor (let i = cardDeck.length - 1; i > 0; i--) {\r\n\t\t\tlet randomIndex = Math.floor(Math.random() * (i + 1));\r\n\t\t\tlet temp = cardDeck[i];\r\n\t\t\tcardDeck[i] = cardDeck[randomIndex];\r\n\t\t\tcardDeck[randomIndex] = temp;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tcards: cardDeck,\r\n\t\t\tstart: true,\r\n\t\t\tdisplayText: 'Click only 2 cards at a time to check their number',\r\n\t\t});\r\n\t};\r\n\r\n\tturnCards = (event) => {\r\n\t\tlet clickedCard = event.target;\r\n\t\tlet objectPattern = this.state.eventTarget;\r\n\t\tobjectPattern.push(clickedCard);\r\n\t\tlet pattern = this.state.userClickedPattern;\r\n\t\tlet cardIndex = clickedCard.getAttribute('index');\r\n\t\tlet cardNum = this.state.cards[cardIndex];\r\n\t\tpattern.push(cardNum);\r\n\t\tclickedCard.style.transform = 'rotateY(0)';\r\n\t\tclickedCard.style.fontSize = '5rem';\r\n\t\tif (pattern.length === 2) {\r\n\t\t\tif (pattern[pattern.length - 1] !== pattern[pattern.length - 2]) {\r\n\t\t\t\tconsole.log(pattern[pattern.length - 1]);\r\n\t\t\t\tconsole.log(pattern[pattern.length - 2]);\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tobjectPattern[objectPattern.length - 1].style.fontSize = '0';\r\n\t\t\t\t\tobjectPattern[objectPattern.length - 1].style.transform =\r\n\t\t\t\t\t\t'rotateY(180deg)';\r\n\t\t\t\t\tobjectPattern[objectPattern.length - 2].style.fontSize = '0';\r\n\t\t\t\t\tobjectPattern[objectPattern.length - 2].style.transform =\r\n\t\t\t\t\t\t'rotateY(180deg)';\r\n\t\t\t\t}, 1300);\r\n\t\t\t}\r\n\t\t} else if (pattern.length > 2) {\r\n\t\t\tpattern.splice(0, 2);\r\n\t\t}\r\n\t\tconsole.log(pattern.length);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst cardsList = this.state.cards.map((num, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tcontent={num}\r\n\t\t\t\t\tturnCards={this.turnCards}\r\n\t\t\t\t\tindex={index}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<Display\r\n\t\t\t\t\ttext={this.state.displayText}\r\n\t\t\t\t\tshuffle={this.shuffleCards}\r\n\t\t\t\t\tstart={this.state.start}\r\n\t\t\t\t/>\r\n\t\t\t\t<Hoc>{cardsList}</Hoc>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}